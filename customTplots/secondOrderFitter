

function coeffCalc2, xx,yy, ishock,x0
	;;		"dim" is xp[0]-xs[0]
	;;		then xx0=xx[0]-x0		
	
	xx0=xx[0]-x0
	print,"ishock-xx0=",ishock-xx0
	ybeg=yy[0:ishock-xx0]
	yend=yy[ishock-xx0:*]

	xbeg=xx[0:ishock-xx0]
	xend=xx[ishock-xx0:*]
	
	xpa=xx-xx[0]


	N=numel(xx)
	nend=numel(yend)
	nbeg=numel(ybeg)
	i0=xx[0]-x0
	

	mx=max(yend[nend/5:*])

	mn=min(ybeg[0:4*nbeg/5])

	m0=(mx-mn)/2
	m3=(mx+mn)/2
			
			;m2  is the x value in approximately at the top of the curve. to zeroth order, lets use m2=xpa[hj-gim]
			;print,"m2  is the x value in the middle of the curve. to zeroth order, lets use m2=xpa[hj-gim]
;			m2=xpa[hj-gim]
	m2=xpa[ishock-xx0]

	m1=0.7
	
	MM=[m0,m1,m2,m3]

	RETURN,MM

end


pro secondOrderFitter,plt,newName=newName,mins=mins
	if NOT KEYWORD_SET(newName) THEN newName=plt+'_prime'
	if not keyword_set(mins) then mins=7
	print,"HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH"
	print,"secondOrderFitter, ",plt,", ",newName," , ",string(mins)
	print,"HVHVHVHVHVHVHVHVHVHVHVHVHVHVHVHVHVHVHVHVHVHVHVHVHVHVH"

	minChi=1.5
	curveType="tanhfit"

	get_data,"mvn_B_1sec_Mag",data=datB
	
	get_data,plt+"_shocks_inbound",data=datsin
	get_data,plt+"_shocks_outbound",data=datsout
	get_data,plt+"_inbound",data=datbin
	get_data,plt+"_outbound",data=datbout


	B=datB.y

	rB=reverse(B)
	xs=datB.x
	x0=xs[0]
	N=numel(xs)
	sin=datsin.y
	sout=datsout.y

	Bin=datbin.y
	Bout=datbout.y

	rsout=reverse(sout)
	rBout=reverse(Bout)

	Gin=where(sin ne 0,incount)
	rGout=where(rsout ne 0,outcount)

	ins=sin[Gin]

	routs=rsout[rGout]

	dBin=Bin*0
	rdBout=Bin*0

	zin=B*0
	rzout=B*0
	
	inshocks=zin*0
	routshocks=zin*0

	for i=1, N-1 do begin
		dBin[i] = Bin[i]-Bin[i-1] ; x[i]-x[i-1] ==1 so don't need to divide
		rdBout[i]=-1*(rBout[i]-rBout[i-1]); *(-1) because rx[i]-rx[i-1] =-1
	endfor

	for el=0, incount-1 do begin

		i=Gin[el]
		print,"[el,i]=",[el,i]
		si=i
		ei=i

		for j=0,2*60*mins do begin
			si--
			if i-j eq 0 then break
			if dBin[si] eq 1 then break
		
		endfor

		for j=0,60*mins do begin
			ei++
			if i+j eq N-1 then break
			if dBin[ei] eq -1 then break
		
		endfor

		Bp=B[si:ei]
		xp=xs[si:ei]
		Bbeg=B[si:i-1]
		Bend=B[i:ei]

		xpa=xp-min(xp)
		imin=min(xp)-min(xs)
		Np=numel(Bp)

		nbeg=numel(Bbeg)
		nend=numel(Bend)

		MM=coeffCalc2(xp,Bp,i,x0)

		print,"to second Order, guess that MM=",MM
		weights=1.0/Bp

		status=-1
		CHISQ=-1
		yfit=CURVEFIT(xpa, Bp, weight, MM, SIGMA, FUNCTION_NAME=curveType,status=status,CHISQ=CHISQ)
		
		print,"status=",status,", chi^2=",CHISQ
		PRINT, 'Function parameters: ', MM	
		NNN=where(FINITE(yfit) eq 0, ncount, COMPLEMENT=B_C, NCOMPLEMENT=countnc)

		ishock=round(MM[2]/MM[1])+imin;m2) +dim
		if (status eq 0 ) and (MM[0] gt 0) and (MM[1] gt 0) and (ncount lt 1) and (CHISQ lt minChi) then begin

			for i=0, Np-1 do zin[i+imin]=yfit[i]
			inshocks[ishock]=1
		endif
		
	endfor


	print,"NOW FOR OUTWARD SIDE.3(|IZ (|5|AWTUO 5|O=| WO|/|"

	for el=0, outcount-1 do begin

		i=rGout[el]
		print,"[el,i]=",[el,i]
		si=i
		ei=i

		for j=0,2*60*mins do begin
			si--

			if i-j eq -1 then begin
				print, "you idiot. Thats the wrong way!"

				stop

			endif

			if i-j eq 0 then break
			if rdBout[si] eq 1 then break
		
		endfor

		for j=0,60*mins do begin
			ei++
			if i+j eq 1 then begin
				print, "you idiot. Thats the wrong way!"

				stop

			endif
			if i+j eq N-1 then break
			if rdBout[ei] eq -1 then break
		
		endfor

		Bp=rB[si:ei]
		xp=xs[si:ei]
		Bbeg=rB[si:i-1]
		Bend=rB[i:ei]

		xpa=xp-min(xp)
		imin=min(xp)-min(xs)
		Np=numel(Bp)

		nbeg=numel(Bbeg)
		nend=numel(Bend)

		MM=coeffCalc2(xp,Bp,i,x0)

		print,"to second Order, guess that MM=",MM
		weights=1.0/Bp

		status=-1
		CHISQ=-1
		yfit=CURVEFIT(xpa, Bp, weight, MM, SIGMA, FUNCTION_NAME=curveType,status=status,CHISQ=CHISQ)
		
		print,"status=",status,", chi^2=",CHISQ
		PRINT, 'Function parameters: ', MM	
		NNN=where(FINITE(yfit) eq 0, ncount, COMPLEMENT=B_C, NCOMPLEMENT=countnc)

		ishock=round(MM[2]/MM[1])+imin;m2) +dim
		if (status eq 0 ) and (MM[0] gt 0) and (MM[1] gt 0) and (ncount lt 1) and (CHISQ lt minChi) then begin

			for i=0, Np-1 do rzout[i+imin]=yfit[i]
			routshocks[ishock]=1
		endif
		
	endfor


	datbin.y=zin
	store_data,newName+"_inbound",data=datbin

	datsin.y=inshocks

	store_data,newName+"_shocks_inbound",data=datsin

	outshocks=reverse(routshocks)
	zout=reverse(rzout)

	datbout.y=zout
	store_data,newName+"_outbound",data=datbout

	datsin.y=outshocks

	store_data,newName+"_shocks_outbound",data=datsin

	z=zin+zout

	shocks=inshocks+outshocks

	datbout.y=z
	store_data,newName,data=datbout

	datsin.y=shocks

	store_data,newName+"_shocks",data=datsin
	

end
